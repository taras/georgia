name: TNP Merge

on:
  push:
    branches:
      - release-*
jobs:
  # tests:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@master
  #   - name: yarn
  #     run: yarn
  #   - name: test
  #     run: yarn test
    # - name: lint
    #   run: yarn lint
    # - name: coverage
    #   run: |
    #     yarn coverage
    #     yarn coveralls
        # for microstates
        
  publish:
    name: Commit & Publish
    runs-on: ubuntu-latest
    # needs: tests
    steps:
    - uses: actions/checkout@v1
    - name: Commit & Publish
      run: |
        email="`node -e \"console.log(require('./package.json').author.dingding)\"`"
        name="`node -e \"console.log(require('./package.json').author.dingdinsg)\"`"
        #echo "${#email}"
        if [[ "$email"=="undefined" && "$name"=="undefined" ]]
        then
          echo shouldseethisyeah
        else
          echo error
        fi
        echo ${#SEMVER_USER_EMAIL}
        # if [[ "$(git log -1 --pretty=%B)" =~ "[ci skip]" ]]
        # then 
        #   echo Skipping because this commit is automated
        # else
        #   # git setup
        #   git remote set-url origin https://${GITHUB_TOKEN}:x-oauth-basic@github.com/taras/georgia.git
        #   git fetch origin +refs/heads/*:refs/heads/*
        #   branch=$(printf "%s\n" "${GITHUB_REF#*refs\/heads\/}")
        #   git checkout $branch
        #   git config user.email "`node -e \"console.log(require('./package.json').author.email)\"`"
        #   git config user.name "`node -e \"console.log(require('./package.json').author.name)\"`"
        #   # install hub
        #   wget https://github.com/github/hub/releases/download/v2.12.3/hub-linux-amd64-2.12.3.tgz
        #   tar -zxvf hub-linux-amd64-2.12.3.tgz
        #   cd hub-linux-amd64-2.12.3
        #   sudo ./install
        #   labels=$(hub pr list -s merged -L 1 -f %L)
        #   if [[ "$labels" =~ "major" ]]
        #   then
        #     echo Skipping because major release should be published manually
        #   else 
        #     cd ..
        #     if [[ "$labels" =~ "minor" ]]
        #     then
        #       npm version minor --no-git-tag-version 
        #     else
        #       npm version patch --no-git-tag-version
        #     fi
        #     git add package.json
        #     current="`node -e \"console.log(require('./package.json').version)\"`"
        #     git commit -m "Release version $current [ci skip]"
        #     git push origin HEAD
        #     echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
        #     npm publish --access=public
        #   fi
        # fi
      env:
        GITHUB_TOKEN: ${{ secrets.MK_TOKEN }} 
          # update to GITHUB_TOKEN
          # also in readme.md
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}